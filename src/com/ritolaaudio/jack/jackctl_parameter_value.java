
/*******************************************************************************
 *  * JavaJACK - A JACK bridge for Java.
 *  *     Copyright (C) 2011  Chuck Ritola
 *  * 	chuck@ritolaaudio.com 
 * *	...with parts generated by JNAerator, where noted.
 *  * 
 *  *     This program is free software: you can redistribute it and/or modify
 *  *     it under the terms of the GNU General Public License as published by
 *  *     the Free Software Foundation, either version 3 of the License, or
 *  *     (at your option) any later version.
 *  * 
 *  *     This program is distributed in the hope that it will be useful,
 *  *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  *     GNU General Public License for more details.
 *  * 
 *  *     You should have received a copy of the GNU General Public License
 *  *     along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *  ******************************************************************************/
package com.ritolaaudio.jack;
import com.ochafik.lang.jnaerator.runtime.Union;
/**
 * intentionally similar to jack_driver_param_value_t<br>
 * <i>native declaration : jack/control.h:55</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.free.fr/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class jackctl_parameter_value extends Union<jackctl_parameter_value, jackctl_parameter_value.ByValue, jackctl_parameter_value.ByReference > {
	/// < @brief member used for ::JackParamUInt
	public int ui;
	/// < @brief member used for ::JackParamInt
	public int i;
	/// < @brief member used for ::JackParamChar
	public byte c;
	/**
	 * < @brief member used for ::JackParamString<br>
	 * C type : char[127 + 1]
	 */
	public byte[] str = new byte[(127 + 1)];
	/// < @brief member used for ::JackParamBool
	public boolean b;
	public jackctl_parameter_value() {
		super();
	}
	/// @param c < @brief member used for ::JackParamChar
	public jackctl_parameter_value(byte c) {
		super();
		this.c = c;
		setType(java.lang.Byte.TYPE);
	}
	/// @param ui_or_i < @brief member used for ::JackParamUInt, or < @brief member used for ::JackParamInt
	public jackctl_parameter_value(int ui_or_i) {
		super();
		this.i = this.ui = ui_or_i;
		setType(java.lang.Integer.TYPE);
	}
	/// @param b < @brief member used for ::JackParamBool
	public jackctl_parameter_value(boolean b) {
		super();
		this.b = b;
		setType(java.lang.Boolean.TYPE);
	}
	/**
	 * @param str < @brief member used for ::JackParamString<br>
	 * C type : char[127 + 1]
	 */
	public jackctl_parameter_value(byte str[]) {
		super();
		if (str.length != this.str.length) 
			throw new IllegalArgumentException("Wrong array size !");
		this.str = str;
		setType(byte[].class);
	}
	protected ByReference newByReference() { return new ByReference(); }
	protected ByValue newByValue() { return new ByValue(); }
	protected jackctl_parameter_value newInstance() { return new jackctl_parameter_value(); }
	public static jackctl_parameter_value[] newArray(int arrayLength) {
		return Union.newArray(jackctl_parameter_value.class, arrayLength);
	}
	public static class ByReference extends jackctl_parameter_value implements com.ochafik.lang.jnaerator.runtime.Structure.ByReference {
		
	};
	public static class ByValue extends jackctl_parameter_value implements com.ochafik.lang.jnaerator.runtime.Structure.ByValue {
		
	};
}
