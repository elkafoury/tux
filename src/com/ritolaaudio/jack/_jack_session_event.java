
/*******************************************************************************
 *  * JavaJACK - A JACK bridge for Java.
 *  *     Copyright (C) 2011  Chuck Ritola
 *  * 	chuck@ritolaaudio.com 
 * *	...with parts generated by JNAerator, where noted.
 *  * 
 *  *     This program is free software: you can redistribute it and/or modify
 *  *     it under the terms of the GNU General Public License as published by
 *  *     the Free Software Foundation, either version 3 of the License, or
 *  *     (at your option) any later version.
 *  * 
 *  *     This program is distributed in the hope that it will be useful,
 *  *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  *     GNU General Public License for more details.
 *  * 
 *  *     You should have received a copy of the GNU General Public License
 *  *     along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *  ******************************************************************************/
package com.ritolaaudio.jack;
import com.ochafik.lang.jnaerator.runtime.Structure;
import com.sun.jna.Pointer;
/**
 * <i>native declaration : jack/session.h:97</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.free.fr/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class _jack_session_event extends Structure<_jack_session_event, _jack_session_event.ByValue, _jack_session_event.ByReference > {
	/**
	 * The type of this session event.<br>
	 * @see jack_session_event_type_t<br>
	 * C type : jack_session_event_type_t
	 */
	public int type;
	/**
	 * Session directory path, with trailing separator.<br>
	 * * This directory is exclusive to the client; when saving the client may<br>
	 * create any files it likes in this directory.<br>
	 * C type : const char*
	 */
	public Pointer session_dir;
	/**
	 * Client UUID which must be passed to jack_client_open on session load.<br>
	 * * The client can specify this in the returned command line, or save it<br>
	 * in a state file within the session directory.<br>
	 * C type : const char*
	 */
	public Pointer client_uuid;
	/**
	 * Reply (set by client): the command line needed to restore the client.<br>
	 * * This is a platform dependent command line. It must contain<br>
	 * ${SESSION_DIR} instead of the actual session directory path. More<br>
	 * generally, just as in session files, clients should not include any<br>
	 * paths outside the session directory here as this makes<br>
	 * archival/distribution impossible.<br>
	 * * This field is set to NULL by Jack when the event is delivered to the<br>
	 * client.  The client must set to allocated memory that is safe to<br>
	 * free(). This memory will be freed by jack_session_event_free.<br>
	 * C type : char*
	 */
	public Pointer command_line;
	/**
	 * Reply (set by client): Session flags.<br>
	 * @see jack_session_flags_t<br>
	 * C type : jack_session_flags_t
	 */
	public int flags;
	/// Future flags. Set to zero for now.
	public int future;
	public _jack_session_event() {
		super();
		initFieldOrder();
	}
	protected void initFieldOrder() {
		setFieldOrder(new java.lang.String[]{"type", "session_dir", "client_uuid", "command_line", "flags", "future"});
	}
	/**
	 * @param type The type of this session event.<br>
	 * @see jack_session_event_type_t<br>
	 * C type : jack_session_event_type_t<br>
	 * @param session_dir Session directory path, with trailing separator.<br>
	 * * This directory is exclusive to the client; when saving the client may<br>
	 * create any files it likes in this directory.<br>
	 * C type : const char*<br>
	 * @param client_uuid Client UUID which must be passed to jack_client_open on session load.<br>
	 * * The client can specify this in the returned command line, or save it<br>
	 * in a state file within the session directory.<br>
	 * C type : const char*<br>
	 * @param command_line Reply (set by client): the command line needed to restore the client.<br>
	 * * This is a platform dependent command line. It must contain<br>
	 * ${SESSION_DIR} instead of the actual session directory path. More<br>
	 * generally, just as in session files, clients should not include any<br>
	 * paths outside the session directory here as this makes<br>
	 * archival/distribution impossible.<br>
	 * * This field is set to NULL by Jack when the event is delivered to the<br>
	 * client.  The client must set to allocated memory that is safe to<br>
	 * free(). This memory will be freed by jack_session_event_free.<br>
	 * C type : char*<br>
	 * @param flags Reply (set by client): Session flags.<br>
	 * @see jack_session_flags_t<br>
	 * C type : jack_session_flags_t<br>
	 * @param future Future flags. Set to zero for now.
	 */
	public _jack_session_event(int type, Pointer session_dir, Pointer client_uuid, Pointer command_line, int flags, int future) {
		super();
		this.type = type;
		this.session_dir = session_dir;
		this.client_uuid = client_uuid;
		this.command_line = command_line;
		this.flags = flags;
		this.future = future;
		initFieldOrder();
	}
	protected ByReference newByReference() { return new ByReference(); }
	protected ByValue newByValue() { return new ByValue(); }
	protected _jack_session_event newInstance() { return new _jack_session_event(); }
	public static _jack_session_event[] newArray(int arrayLength) {
		return Structure.newArray(_jack_session_event.class, arrayLength);
	}
	public static class ByReference extends _jack_session_event implements Structure.ByReference {
		
	};
	public static class ByValue extends _jack_session_event implements Structure.ByValue {
		
	};
}
