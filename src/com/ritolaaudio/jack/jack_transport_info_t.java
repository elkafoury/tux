
/*******************************************************************************
 *  * JavaJACK - A JACK bridge for Java.
 *  *     Copyright (C) 2011  Chuck Ritola
 *  * 	chuck@ritolaaudio.com 
 * *	...with parts generated by JNAerator, where noted.
 *  * 
 *  *     This program is free software: you can redistribute it and/or modify
 *  *     it under the terms of the GNU General Public License as published by
 *  *     the Free Software Foundation, either version 3 of the License, or
 *  *     (at your option) any later version.
 *  * 
 *  *     This program is distributed in the hope that it will be useful,
 *  *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  *     GNU General Public License for more details.
 *  * 
 *  *     You should have received a copy of the GNU General Public License
 *  *     along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *  ******************************************************************************/
package com.ritolaaudio.jack;
import com.ochafik.lang.jnaerator.runtime.Structure;
import com.sun.jna.NativeLong;
/**
 * <i>native declaration : ./jack/types.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.free.fr/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class jack_transport_info_t extends Structure<jack_transport_info_t, jack_transport_info_t.ByValue, jack_transport_info_t.ByReference > {
	/// < current frame rate (per second)
	public int frame_rate;
	/// < monotonic, free-rolling
	public long usecs;
	/**
	 * < which fields are legal to read<br>
	 * C type : jack_transport_bits_t
	 */
	public int valid;
	/// C type : jack_transport_state_t
	public int transport_state;
	public int frame;
	public int loop_start;
	public int loop_end;
	/// < SMPTE offset (from frame 0)
	public NativeLong smpte_offset;
	/// < 29.97, 30, 24 etc.
	public float smpte_frame_rate;
	public int bar;
	public int beat;
	public int tick;
	public double bar_start_tick;
	public float beats_per_bar;
	public float beat_type;
	public double ticks_per_beat;
	public double beats_per_minute;
	public jack_transport_info_t() {
		super();
		initFieldOrder();
	}
	protected void initFieldOrder() {
		setFieldOrder(new java.lang.String[]{"frame_rate", "usecs", "valid", "transport_state", "frame", "loop_start", "loop_end", "smpte_offset", "smpte_frame_rate", "bar", "beat", "tick", "bar_start_tick", "beats_per_bar", "beat_type", "ticks_per_beat", "beats_per_minute"});
	}
	protected ByReference newByReference() { return new ByReference(); }
	protected ByValue newByValue() { return new ByValue(); }
	protected jack_transport_info_t newInstance() { return new jack_transport_info_t(); }
	public static jack_transport_info_t[] newArray(int arrayLength) {
		return Structure.newArray(jack_transport_info_t.class, arrayLength);
	}
	public static class ByReference extends jack_transport_info_t implements Structure.ByReference {
		
	};
	public static class ByValue extends jack_transport_info_t implements Structure.ByValue {
		
	};
}
